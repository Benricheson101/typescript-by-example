{"pageProps":{"example":{"content":"Similarly to with classes, TypeScript allows you to extend interfaces with the `extends` keyword.\n\\\n\\\nExtended types have all properties of the parent class and any new properties declared.\n\\\n\\\nBy using the `extends` keyword in a [generic](/generics) type declaration, you can match any child of a parent type.","code":"interface Person {\n  firstName: string;\n  lastName: string;\n  pronouns?: string;\n}\n\ninterface Course {\n  name: string;\n  instructor: Person;\n}\n\ninterface UniversityStudent extends Person {\n  school: string;\n  courses: Course[];\n}\n\nconst johnDoe: UniversityStudent = {\n  firstName: 'John',\n  lastName: 'Doe',\n  pronouns: 'they/them',\n  school: 'Princeton University',\n  courses: [\n    {\n      name: 'Astronomy',\n      instructor: {\n        firstName: 'Richard',\n        lastName: 'Pierson',\n      },\n    },\n  ],\n};\n\n// Can be used with objects of type `Parent` and any derivatives\ndeclare function greet<T extends Person>(person: T);\n// Can only be used with with objects of type `UniversityStudent`\ndeclare function attendClass(student: UniversityStudent);","meta":{"title":"Type Inheritance","description":"Extended types in TypeScript","slug":"type-inheritance"}}},"__N_SSG":true}